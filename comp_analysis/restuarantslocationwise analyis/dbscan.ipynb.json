{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dbdc653c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import DBSCAN\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "043f6425",
   "metadata": {},
   "outputs": [],
   "source": [
    "#multiple db scan ref code used to explore potentail for analysis\n",
    "#https://stackoverflow.com/questions/35971441/how-to-adjust-this-dbscan-algorithm-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "91694d50",
   "metadata": {},
   "outputs": [],
   "source": [
    "burioto_comp = pd.read_csv('rest1.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7886b16a",
   "metadata": {},
   "outputs": [],
   "source": [
    "coords = burioto_comp[['latitude', 'longitude']].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f2b81b8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "kms_per_radian = 6371.0088\n",
    "epsilon = 1 / kms_per_radian\n",
    "db = DBSCAN(eps=epsilon,\n",
    "            min_samples=1,\n",
    "            algorithm='ball_tree',\n",
    "            metric='haversine')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a708132d",
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = db.fit_predict(np.radians(coords))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "632f746e",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)\n",
    "n_noise_ = list(labels).count(-1)\n",
    "core_samples_mask = np.zeros_like(db.labels_, dtype=bool)\n",
    "core_samples_mask[db.core_sample_indices_] = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b03344b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "unique_labels = set(labels)\n",
    "colors = [\n",
    "    plt.cm.Spectral(each) for each in np.linspace(0, 1, len(unique_labels))\n",
    "]\n",
    "for k, col in zip(unique_labels, colors):\n",
    "    if k == -1:\n",
    "\n",
    "        col = [0, 0, 0, 1]\n",
    "\n",
    "    class_member_mask = labels == k\n",
    "\n",
    "    xy = coords[class_member_mask & core_samples_mask]\n",
    "    plt.plot(\n",
    "        xy[:, 0],\n",
    "        xy[:, 1],\n",
    "        \"o\",\n",
    "        markerfacecolor=tuple(col),\n",
    "        markeredgecolor=\"k\",\n",
    "        markersize=14,\n",
    "    )\n",
    "\n",
    "    xy = coords[class_member_mask & ~core_samples_mask]\n",
    "    plt.plot(\n",
    "        xy[:, 0],\n",
    "        xy[:, 1],\n",
    "        \"o\",\n",
    "        markerfacecolor=tuple(col),\n",
    "        markeredgecolor=\"k\",\n",
    "        markersize=6,\n",
    "    )\n",
    "\n",
    "plt.title(\"Estimate: %d\" % n_clusters_)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "889c1890",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb15e40f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
